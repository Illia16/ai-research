{"messages": [{"role": "assistant", "content": "// This is Header component. It's located at the top of the web-page. It can be position static, sticky, fixed. Based on the user input it should have an certain number of nav items (and if any subnav items). import React, { useEffect, useRef, useState } from 'react'; import { Link } from 'gatsby'; import { useLocation } from '@reach/router'; import './Header.scss'; const Header = () => { const [hamburgerOpen, setHamburgerOpen] = useState(false); const [submenus, setSubmenus] = useState({}); const navRef = useRef(); const hamburgerBtnRef = useRef(); const { pathname, hash } = useLocation(); const closeMenus = (e) => { if (!navRef.current.contains(e.target)) { setHamburgerOpen(false); setSubmenus({}); } }; const toggleHamburgerMenu = () => { setHamburgerOpen(!hamburgerOpen); }; const toggleSubMenu = (key, value) => { setSubmenus((prev) => ({ ...prev, [key]: value })); }; useEffect(() => { const body = document.body; if (hamburgerOpen) { body.classList.add('menu-open'); } else { body.classList.remove('menu-open'); } }, [hamburgerOpen]); const getButtonSelector = () => { const efficacyDropdown = ['/signs', '/symptoms', '/safety']; if (efficacyDropdown.includes(pathname)) { return '.kf-submenu--efficacy button'; } }; // highlight dropdown menu button if on a page within that section useEffect(() => { const selector = getButtonSelector(); if (selector) { navRef.current.querySelector(selector).classList.add('active'); } }, [pathname]); // useEffect(() => { if (hash) { const el = document.querySelector(hash); if (el) { setTimeout(() => { el.scrollIntoView({ behavior: 'smooth' }); }, 1000); } // close hamburger menu if hash link is clicked (e.g: ISI link) if (hamburgerOpen) { setHamburgerOpen(false); } } }, [hash]); useEffect(() => { if (typeof window !== 'undefined') { window.addEventListener('click', closeMenus); } return () => { if (typeof window !== 'undefined') { window.removeEventListener('click', closeMenus); } }; }, []); return ( <header id='header'> <div className='header-left'> <Link to='/' className='logo'> <span className='sr-only'>site logo</span> <img src='/images/logo-mobile.svg' className='mobile-tablet-only' alt='Go to [site.com]' /> <img src='/images/logo.svg' className='desktop-only' alt='Go to [site.com]' /> </Link> </div> <nav ref={navRef} className='kf-menu' id='main-menu'> <button ref={hamburgerBtnRef} id='toggle-hamburger-menu-btn' onClick={toggleHamburgerMenu} aria-expanded={hamburgerOpen} aria-haspopup={true} aria-label='open navigation menu' aria-controls='site_navigation'> <span className='nav__hamburger-menu'> <span className='nav__hamburger-inner'></span> <span className='nav__hamburger-inner'></span> <span className='nav__hamburger-inner'></span> </span> </button> <div className='nav-links'> <ul className='eyebrow-links'> <li> <a href='/prescribing-information.pdf' target='_blank' rel='noopener noreferrer'> Prescribing Information </a> </li> <li> <a href='#isi'>Important Safety Information</a> </li> <li> <a href='/instructions-for-use.pdf' target='_blank' rel='noopener noreferrer'> Instructions for Use </a> </li> <li> <Link to='/support/#request-rep'> Request a Representative </Link> </li> <li> <a href='urlToParentSite' target='_blank' rel='noopener noreferrer'> Patient Site </a> </li> </ul> <RecursiveMenu menuLinks={MenuLinks} submenus={submenus} toggleSubMenu={toggleSubMenu} /> </div> <div className='bg-mobile'></div> </nav> </header> ); }; export default Header; const RecursiveMenu = ({ menuLinks, id, submenus, toggleSubMenu }) => { return ( <ul id={!id ? 'site_navigation' : id} className={!id ? 'kf-menu' : 'kf-submenu'}> {menuLinks.map((item, i) => { return ( <li key={i} className={item.class}> {item.subMenu ? ( <> <button onClick={() => toggleSubMenu( item.linkName, !submenus[item.linkName] ) } aria-haspopup={true} aria-expanded={submenus[item.linkName]} aria-controls={item.linkName}> {item.link} </button> <RecursiveMenu menuLinks={item.subMenu} id={item.linkName} submenus={submenus} toggleSubMenu={toggleSubMenu} /> </> ) : ( item.link )} </li> ); })} </ul> ); }; const MenuLinks = [ { linkName: 'Home', link: ( <Link to='/' activeClassName='active'> Home </Link> ), class: 'kf-menu-link kf-menu-link--home', }, { linkName: 'About', link: ( <Link to='/about' activeClassName='active'> About </Link> ), class: 'kf-menu-link kf-menu-link--about', }, { linkName: 'kf-submenu--efficacy', link: 'Efficacy', class: 'kf-menu-link kf-submenu--efficacy', subMenu: [ { linkName: 'Symptoms', link: ( <Link to='/symptoms' activeClassName='active'> Symptoms </Link> ), class: 'kf-sub-menu-link kf-sub-menu-link--symptoms', }, { linkName: 'Safety', link: ( <Link to='/safety' activeClassName='active'> Safety Profile </Link> ), class: 'kf-sub-menu-link kf-sub-menu-link--safety', }, { linkName: 'Signs', link: ( <Link to='/signs' activeClassName='active'> Signs </Link> ), class: 'kf-sub-menu-link kf-sub-menu-link--signs', }, ], }, ];"}, {"role": "user", "content": "Header React jsx component"}]}
{"messages": [{"role": "assistant", "content": "// This is Modal component. It displays content in a modal dialog box with a close button. import PropTypes from 'prop-types'; import React, { useRef, useEffect, useContext } from 'react'; import AppContext from '@src/context'; // Style Imports import './Modal.scss'; const Modal = ({ modal, addedClass }) => { const ctx = useContext(AppContext); const modalBody = useRef(); const activeEl = useRef(null); const closeModal = (e) => { ctx.setModalOpen(false); ctx.setExternalUrl(null); ctx.setModalType(null); }; const disablePageScroll = (modalOpen) => { const html = document.querySelector('html'); if (html) { if (modalOpen) { html.classList.add('modal-open'); } else { html.classList.remove('modal-open'); } } }; const handleOverlayClick = (event) => { if (event.target.classList.contains('modal-body')) { closeModal(event); } }; const focusLoop = (e, selector) => { const tabPressed = e.key === 'Tab' || e.keyCode === 9; if (!tabPressed) return; const elems = document.querySelectorAll(selector); if (elems?.length) { const firstElem = elems[0]; const lastElem = elems[elems.length - 1]; if (!Array.from(elems).includes(document.activeElement)) { firstElem.focus(); } if (e.shiftKey) { if (document.activeElement === firstElem) { lastElem.focus(); e.preventDefault(); } } else { if (document.activeElement === lastElem) { firstElem.focus(); e.preventDefault(); } } } }; useEffect(() => { activeEl.current = document.activeElement; disablePageScroll(true); modalBody.current.focus({ preventScroll: true }); document.addEventListener('mousedown', handleOverlayClick); modalBody.current.addEventListener('keydown', (e) => focusLoop(e, '.modal-body a, .modal-body button') ); return () => { document.removeEventListener('mousedown', handleOverlayClick); modalBody.current?.removeEventListener('keydown', (e) => focusLoop(e, '.modal-body a, .modal-body button') ); disablePageScroll(false); activeEl.current.focus(); activeEl.current = null; }; }, []); return ( <section className={'modal ' + addedClass}> <div className='modal-overlay' /> <div ref={modalBody} tabIndex='0' className='modal-body'> <button className='modal-close--btn' aria-label='Close Modal' onClick={closeModal} /> <div className='modal-exit--inner' role='dialog' aria-modal='true' aria-labelledby='modal-exit--title'> <p id='modal-exit--title'> You are now leaving example&#8209;pro.com. Would you like to continue? </p> <div className='modal-exit--actions'> <a onClick={closeModal} href={ctx.externalUrl} target='_blank' rel='noopener noreferrer'> Continue </a> <button onClick={closeModal}>Stay on site</button> </div> </div> </div> </section> ); }; Modal.propTypes = { modal: PropTypes.string, addedClass: PropTypes.string, }; Modal.defaultProps = { modal: 'exit', addedClass: '', }; export default Modal;"}, {"role": "user", "content": "Modal React jsx component"}]}
{"messages": [{"role": "assistant", "content": "// This is Skip to content component. It allows users to skip to a specific section of the page. import React from 'react'; const SkipToContent = () => ( <div className='skip-to-content text-center font-bold'> <a href='#content' className='w-0 h-0 block overflow-hidden focus:w-auto focus:h-auto focus:border-2'> Skip to Content </a> </div> ); export default SkipToContent;"}, {"role": "user", "content": "SkipToContent React jsx component"}]}
{"messages": [{"role": "assistant", "content": "// This is Accordion component. It's a collapsible content panel with multiple sections. import React, { useRef, useState } from 'react'; import PropTypes from 'prop-types'; import './Accordion.scss'; const Accordion = ({ id, className, initialExpanded, headingLevel, collapsedLabel, expandedLabel, children, }) => { const accordionRef = useRef(null); const triggerBtnRef = useRef(null); const panelRef = useRef(null); const [openState, setOpenState] = useState(initialExpanded); const triggerBtnId = id + '__button'; const panelId = id + '__panel'; const TriggerContainer = `h${headingLevel}`; const openAccordion = () => { setOpenState(true); panelRef?.current?.focus(); }; const closeAccordion = () => { setOpenState(false); triggerBtnRef?.current?.focus(); }; const toggleAccordion = (e) => { e.preventDefault(); return openState ? closeAccordion() : openAccordion(); }; return ( <div id={id} className={'kf-accordion ' + className} ref={accordionRef}> <TriggerContainer className='kf-accordion__trigger'> <button ref={triggerBtnRef} id={triggerBtnId} className={'kf-accordion__button ' + (openState ? 'expanded' : '')} aria-expanded={openState ? 'true' : 'false'} aria-controls={panelId} onClick={toggleAccordion}> {openState ? expandedLabel || collapsedLabel : collapsedLabel} </button> </TriggerContainer> <div ref={panelRef} id={panelId} className={'kf-accordion__panel ' + (openState ? 'expanded' : '')} style={openState ? { display: 'block' } : { display: 'none' }} role='region' aria-labelledby={triggerBtnId} aria-hidden={openState ? 'false' : 'true'}> {children} </div> </div> ); }; Accordion.propTypes = { id: PropTypes.string.isRequired, className: PropTypes.string, initialExpanded: PropTypes.bool, headingLevel: function (props, propName) { if (props[propName] < 1 || props[propName] > 6) { return new Error('Invalid heading level. The integer range for this is 1-6.'); } }, collapsedLabel: PropTypes.node.isRequired, expandedLabel: PropTypes.node, children: PropTypes.node.isRequired, }; Accordion.defaultProps = { id: '', className: '', initialExpanded: false, headingLevel: 3, collapsedLabel: null, expandedLabel: null, children: null, }; export default Accordion;"}, {"role": "user", "content": "Accordion React jsx component"}]}
{"messages": [{"role": "assistant", "content": "// This is Breadcrumb component. It displays the user's current location within a website's hierarchy. import React from 'react'; import PropTypes from 'prop-types'; const Breadcrumb = ({ items }) => { return ( <nav aria-label='breadcrumb'> <ol className='breadcrumb'> {items && items.map((item, index) => ( <li key={index} className='breadcrumb-item'> {index === items.length - 1 ? ( <span className='breadcrumb-link'>{item.label}</span> ) : ( <a href={item.url} className='breadcrumb-link'> {item.label} </a> )} </li> ))} </ol> </nav> ); }; Breadcrumb.propTypes = { items: PropTypes.array, }; Breadcrumb.defaultProps = { items: [ { label: 'Home', url: '/' }, { label: 'Products', url: '/about' }, { label: 'Category', url: '/about/about-this-drug' }, { label: 'Product Name' }, ], }; export default Breadcrumb;"}, {"role": "user", "content": "Breadcrumb React jsx component"}]}
{"messages": [{"role": "assistant", "content": "// This is Cta(Call to action) component. It is a styled button or a link with possible background or something. import React from 'react'; import PropTypes from 'prop-types'; import { Link } from 'gatsby'; import './Cta.scss'; const Cta = ({ title, linkCopy, linkUrl, image, imgAlt, color }) => { return ( <div className='bottom-cta'> {' '} <img src={image} alt={imgAlt} />{' '} <div className={`bottom-cta--copy ${color} container`}> {' '} <h2>{title}</h2>{' '} <Link to={linkUrl} className={`link-arrow bottom-cta-link`}> {' '} {linkCopy}{' '} </Link>{' '} </div>{' '} </div> ); }; Cta.propTypes = { title: PropTypes.node.isRequired, linkCopy: PropTypes.node.isRequired, linkUrl: PropTypes.string.isRequired, image: PropTypes.string.isRequired, imgAlt: PropTypes.string, color: PropTypes.string, }; Cta.defaultProps = { imgAlt: '', color: '' }; export default Cta;"}, {"role": "user", "content": "Cta React jsx component"}]}
{"messages": [{"role": "assistant", "content": "// This is Isi(Important Safety Information) component. It displays important safety information. import React from 'react'; import './Isi.scss'; const Isi = () => { return ( <div id='isi' className='container'> <div> <h3>Important Safety Information</h3> <p> The most common adverse reaction reported in 82% of patients was sneezing. Events that were reported in 5-16% of patients were cough, throat irritation, and instillation-site (nose) irritation. </p> </div> <div> <h3>Indication</h3> <p> Example<sup>&reg;</sup> (varenicline solution) nasal spray is indicated for the treatment of the signs and symptoms of dry eye disease. </p> </div> <p className='pi'> <span>Please click here for full</span>{' '} <a href='/prescribing-information.pdf' target='_blank' rel='noopener noreferrer'> Prescribing Information </a> . </p> </div> ); }; export default Isi;"}, {"role": "user", "content": "Isi React jsx component"}]}
{"messages": [{"role": "assistant", "content": "// This is Form component. It may contain various form elements like input=text, select etc. import React, { useState, useRef } from 'react'; // style imports import './Form.scss'; const Form = () => { const formRef = useRef(); const [loading, setLoading] = useState(false); const [data, setData] = useState({ firstName: '', lastName: '', email: '', phoneNumber: '', zipCode: '', specialty: '', npi: '', }); const anyErrors = () => { if ( !data.firstName || !data.lastName || !data.email || !data.phoneNumber || !data.zipCode || !data.specialty || (data?.specialty === 'optometry' && data.npi.length !== 10) || (data?.specialty === 'ophthalmology' && data.npi.length !== 10) || (data?.specialty === 'other' && data.npi.length !== 10) ) { return true; } }; const validateFormInput = () => { if (anyErrors()) return; }; const submitHandler = async (e) => { e.preventDefault(); setLoading(true); if (anyErrors()) return; try { formRef.current.submit(); setLoading(false); } catch (err) { // Handle error } }; const handleChange = (e, field, value) => { const f = field ? field : e.target.name; const v = value ? value : e.target.value; setData((prevData) => ({ ...prevData, [f]: v, })); validateFormInput(f, v); }; return ( <div id='request-a-rep'> <div className='form-bg'></div> <div className='container form-content'> <h3> Want to talk to a rep? <br /> Complete this form to request contact from us. </h3> <form action='https://urlToSubmitFormTo' ref={formRef} method='post'> <fieldset> <legend>All fields required.</legend> <div className='form-row form-row-1'> <div className='form-input'> <div className='kf-textInput'> <label htmlFor='firstName' className='kf-textInput__label'> First Name </label> <input className='kf-textInput__field' type='text' name='firstName' id='firstName' aria-labelledby='firstName_error' onChange={handleChange} onBlur={handleChange} /> </div> <div id='firstName_error' aria-live='assertive' className='field-error'> Please fill out this field. </div> </div> <div className='form-input'> <div className='kf-textInput'> <label htmlFor='lastName' className='kf-textInput__label'> Last Name </label> <input className='kf-textInput__field' type='text' name='lastName' id='lastName' aria-labelledby='lastName_error' onChange={handleChange} onBlur={handleChange} /> </div> <div id='lastName_error' aria-live='assertive' className='field-error'> Please fill out this field. </div> </div> </div> <div className='form-row form-row-2'> <div className='form-input'> <div className='kf-textInput'> <label htmlFor='email' className='kf-textInput__label'> Email Address </label> <input className='kf-textInput__field' type='text' name='email' id='email' aria-labelledby='email_error' onChange={handleChange} onBlur={handleChange} /> </div> <div id='email_error' aria-live='assertive' className='field-error'> Please enter a valid email address. </div> </div> <div className='form-input'> <div className='kf-textInput'> <label htmlFor='phoneNumber' className='kf-textInput__label'> Phone Number </label> <input type='text' className='kf-textInput__field' name='phoneNumber' id='phoneNumber' maxLength='10' aria-labelledby='phoneNumber_error' onChange={handleChange} onBlur={handleChange} /> </div> <div id='phoneNumber_error' aria-live='assertive' className='field-error'> Please fill out this field. </div> </div> </div> <div className='form-row form-row-3'> <div className='form-input'> <div className='kf-textInput'> <label htmlFor='zipCode' className='kf-textInput__label'> Office ZIP Code </label> <input type='text' className='kf-textInput__field' name='zipCode' id='zipCode' maxLength='5' aria-labelledby='zip_error' onChange={handleChange} onBlur={handleChange} /> </div> <div id='zip_error' aria-live='assertive' className='field-error'> Please enter a valid zip code. </div> </div> <div className='form-input'> <div className='kf-selectInput '> <label htmlFor='specialty'>Specialty</label> <select className='field-select' onChange={handleChange} name='specialty' id='specialty'> {[ { label: 'Optometry', val: 'optometry' }, { label: 'Ophthalmology', val: 'ophthalmology', }, { label: 'Technician/Office Staff/Nurse', val: 'technician-office-staff-nurse', }, { label: 'Pharmacist', val: 'pharmacist', }, { label: 'Other Medical Professional', val: 'other', }, ].map((option, index) => ( <option key={index} value={option.val}> {option.label} </option> ))} </select> </div> <div id='specialty_error' aria-live='assertive' className='field-error'> Please select an item in the list. </div> </div> </div> <div className='form-row form-row-4'> {['optometry', 'ophthalmology', 'other'].includes( data.specialty ) && ( <div className='form-input'> <div className='kf-textInput'> <label htmlFor='npi' className='kf-textInput__label'> NPI </label> <input type='text' className='kf-textInput__field' name='npi' id='npi' maxLength='10' aria-labelledby='npi_error' onChange={handleChange} onBlur={handleChange} /> </div> <div id='npi_error' aria-live='assertive' className='field-error'> Please enter a valid NPI number. </div> </div> )} <div className='form-input form-input-submit-btn'> <button type='submit' className='submitBtn link-arrow' onClick={(e) => submitHandler(e)}> Submit </button> </div> </div> </fieldset> </form> <p className='p--consent'> By clicking “Submit,” you confirm that you are a US healthcare professional and agree to be contacted by our representative. </p> </div> </div> ); }; export default Form;"}, {"role": "user", "content": "Form React jsx component"}]}
{"messages": [{"role": "assistant", "content": "// This is Form element. It could be a single input=text, select or any other (firstName, lastName, email etc.) form element. import React from 'react'; // style imports import './FormElement.scss'; const FormElement = ({ label, labelId, labelError, labelErrorId, handleChange }) => { return ( <div className='form-input'> <div className='kf-textInput'> <label htmlFor={labelId} className='kf-textInput__label'> {label} </label> <input type='text' className='kf-textInput__field' name={labelId} id={labelId} aria-labelledby={labelErrorId} onChange={handleChange} onBlur={handleChange} /> </div> <div id={labelErrorId} aria-live='assertive' className='field-error'> {labelError} </div> </div> ); }; export default FormElement;"}, {"role": "user", "content": "FormElement React jsx component"}]}
{"messages": [{"role": "assistant", "content": "// This is StickyIsi component. It's usually sticky(position:fixed) on mobile devices, positioned at the bottom of the screen. It hides once it reaches bottom Isi component. import React, { useEffect, useState, useRef } from 'react'; import PropTypes from 'prop-types'; import './StickyTray.scss'; const StickyTray = ({ children, targetId }) => { let content; const stickyTray = useRef(null); const [hidden, setHidden] = useState(false); const scrollToContent = (e) => { e.preventDefault(); const contentEl = document.querySelector(targetId); if (contentEl) { contentEl.scrollIntoView({ behavior: 'smooth' }); } }; const handleScroll = () => { if (content) { if ('IntersectionObserver' in window) { const iObserver = new IntersectionObserver((entries) => { entries.forEach((entry) => { if (entry.isIntersecting) { setHidden(true); } else if (entry.boundingClientRect.y < 0) { // Keep ISI tray hidden if we've scrolled past the ISI copy setHidden(true); } else { setHidden(false); } }); }); iObserver.observe(content); } else { const isiInView = inViewport(content, true); if (isiInView) { setHidden(true); } } } }; useEffect(() => { content = document.querySelector(targetId); const scrollListener = debounce(handleScroll, 18); document.addEventListener('scroll', scrollListener); handleScroll(); document.addEventListener('scrollToContent', (e) => { scrollToContent(e); }); return () => { document.removeEventListener('scroll', scrollListener); setHidden(false); }; }, []); return ( <div id='sticky-tray' ref={stickyTray} className='kf-stickyTray' style={{ display: hidden ? 'none' : 'block', position: 'fixed', bottom: 0, left: 0, right: 0, zIndex: 100, }}> <button className='container' onClick={scrollToContent}> {children} </button> </div> ); }; StickyTray.defaultProps = { targetId: '', }; StickyTray.propTypes = { children: PropTypes.node.isRequired, targetId: PropTypes.string, }; export default StickyTray; const inViewport = (elem, entireBox = false, xOffset = 0, yOffset = 0) => { if (typeof window !== 'undefined') { const bds = bounds(elem); const doc = getWinSize(); if (!entireBox) { return ( bds.top >= 0 + yOffset && bds.left >= 0 + xOffset && bds.top <= doc.height && bds.left <= doc.width ); } else { const topLimit = bds.top - doc.height; const bottomLimit = bds.top + bds.height; const leftLimit = bds.left - doc.width; const rightLimit = bds.left + bds.width; if (topLimit <= 0 && bottomLimit >= 0 && leftLimit <= 0 && rightLimit >= 0) { return true; } else { return false; } } } return false; }; const debounce = (func, wait, immediate) => { let timeout = null; return function () { const context = this; const args = arguments; const later = () => { timeout = null; if (!immediate) { func.apply(context, args); } }; const callNow = immediate && !timeout; clearTimeout(timeout); timeout = setTimeout(later, wait); if (callNow) { func.apply(context, args); } }; };"}, {"role": "user", "content": "StickyIsi React jsx component"}]}
{"messages": [{"role": "assistant", "content": "// This is Footer component. It displays footer content at the bottom of the page. import React from 'react'; import { Link } from 'gatsby'; import './Footer.scss'; const Footer = () => { return ( <footer id='footer'> <div className='footer-left'> <Link to='/' addedClass='logo'> <img className='logo' src='/images/logo.svg' alt='[siteExample]™ Logo' /> </Link> </div> <div className='footer-right container'> <ul class='footer--links'> <li> <a href='https://[siteExample]/en/about-us/' class='exit-link ' target='_blank' rel='noopener noreferrer'> About us </a> </li> <li> <a href='/faqs#request-a-rep'>Request a representative</a> </li> <li> <a href='https://[siteExample]/en/terms-of-use/' class='exit-link ' target='_blank' rel='noopener noreferrer'> Terms of use </a> </li> <li> <a href='https://[siteExample]/en/privacy-notice/' class='exit-link ' target='_blank' rel='noopener noreferrer'> Privacy Policy </a> </li> </ul> <p>This site is intended for US healthcare professionals only.</p> <p> © 2023 [siteExample] Inc. and/or its affiliates. All rights reserved. <br /> [siteExample] and the [siteExample], a [siteExample] Company. </p> <p>AA-EXA-001122 03/11</p> </div> </footer> ); }; export default Footer;"}, {"role": "user", "content": "Footer React jsx component"}]}